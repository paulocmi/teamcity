{
  "id": "a7f6e1b3-8f44-2eca-33f4-43db0f65ac5f",
  "name": "Postman Globals",
  "values": [
    {
      "enabled": true,
      "key": "grantType",
      "type": "text",
      "value": "client_credentials"
    },
    {
      "key": "assertionModule",
      "value": "var test = (function () {\n    var _ = require('lodash');\n\n    return {\n        resultObject: function (assertiveName, testResult, errorMessage, comparisonMessage) {\n            tests[assertiveName] = testResult;\n\n            var logAssertName = \"FAILED: [\" + assertiveName + \"]\"\n            var logErrorMessage = \"Error: \" + errorMessage;\n            if (!testResult) {\n                console.log(logAssertName);\n                console.log(logErrorMessage);\n                if (typeof responseBody !== \"undefined\") {\n                    console.log(\"Comparison Fail: \" + JSON.stringify(comparisonMessage));\n                    console.log(\"Response Body: \" + responseBody, null, 4);\n\n                }\n            }\n        },\n\n        deepDelete: function (elements, responseObject) {\n            var element = elements.split('.');\n            if (element.length > 1) {\n                test.deepDelete(element.slice(1).join('.'), responseObject[element[0]]);\n            }\n            else {\n                delete responseObject[elements];\n            }\n            return responseObject;\n        },\n\n        getIsGuid: function (foundResult) {\n            var pattern = /^[\"][0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}[\"]$/i;\n            return pattern.test(foundResult);\n        },\n        ableToNextTest: function (envVariable) {\n            try {\n                if (postman.getEnvironmentVariable(envVariable) == 'true') {\n                    return true;\n                } else {\n                    test.resultObject(\"Some test dependency was not created.\", false, \"Check previous requests to verify if a required variable was not created\", \"No Objecs were provived.\")\n                }\n            } catch (e) {\n                test.resultObject(\"Some test dependency was not created.\", false, \"Check previous requests to verify if a required variable was not created\", \"No Objecs were provived.\")\n            }\n        },\n        getAndLoadToEnvironment: function (path, envVariableName) {\n            try {\n                var url = postman.getEnvironmentVariable(\"host\") + \"/\" + postman.getEnvironmentVariable(\"env\") + path;\n                var accessToken = \"OAuth2 \" + postman.getEnvironmentVariable(\"ENV_ACCESS_TOKEN\");\n\n                pm.sendRequest({\n                    url: url,\n                    method: 'GET',\n                    header: {\n                        'Content-Type': 'application/json',\n                        'Authorization': accessToken\n                    },\n                },\n                    function (err, res) {\n                        if (!err) {\n                            pm.environment.set(envVariableName, JSON.stringify(res.json()));\n                        } else {\n                            test.resultObject(\"Check if access_token and other required data exists in this environemnt configuration.\", false, \"-\", \"No Objecs were provived.\")\n                        }\n                    });\n            } catch (e) {\n                test.resultObject(\"Check if access_token and other required data exists in this environemnt configuration.\", false, \"-\", \"No Objecs were provived.\")\n            }\n        },\n\n        parseVariableToJson: function (envVariableName) {\n            try {\n                return JSON.parse(postman.getEnvironmentVariable(envVariableName));\n            } catch (e) {\n                test.resultObject(\"Response object could not be parsed to json.\", false, \"Verify if response can be parsed to a json object\", \"\");\n            }\n        },\n\n        parseResponse: function () {\n            try {\n                return JSON.parse(responseBody);\n            } catch (e) {\n                test.resultObject(\"Response object could not be parsed to json.\", false, \"Verify if response can be parsed to a json object\", \"\");\n            }\n        },\n\n        assertStatusCode: function (expectedCode) {\n            test.assertAreEqual(\"Status code \" + expectedCode, expectedCode, responseCode.code, \"Status code is \" + responseCode.code, { \"Expected\": expectedCode, \"Unexpected error\": responseBody });\n        },\n\n        assertAreEqual: function (assertiveName, expectedResult, foundResult, errorMessage) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Compared objects are not the same\";\n            var comparisonMessage = { \"Expected\": expectedResult, \"Found\": foundResult };\n\n            if ((expectedResult === foundResult) && (typeof foundResult !== 'undefined')) {\n                testResult = true;\n            }\n\n            test.resultObject(assertiveName, testResult, errorMessage, comparisonMessage)\n        },\n\n        assertAreNotEqual: function (assertiveName, expectedResult, foundResult, errorMessage) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Compared objects are the same\";\n            var comparisonMessage = { \"Not Expected\": expectedResult, \"Found\": foundResult };\n\n            if (expectedResult !== foundResult) {\n                testResult = true;\n            }\n\n            test.resultObject(assertiveName, testResult, errorMessage, comparisonMessage)\n        },\n\n        assertIsNumber: function (assertiveName, foundResult, errorMessage) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Tested value is not a number\";\n            var comparisonMessage = { \"Expected\": \"Found result must be a number\", \"Found\": foundResult };\n\n            if (!isNaN(parseFloat(foundResult)) && isFinite(foundResult)) {\n                testResult = true;\n            }\n\n            test.resultObject(assertiveName, testResult, errorMessage, comparisonMessage)\n        },\n\n        assertIsGuid: function (assertiveName, foundResult, errorMessage) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Tested value is not a guid\";\n            var comparisonMessage = { \"Expected\": \"Found result must be a GUID\", \"Found\": foundResult };\n\n            testResult = test.getIsGuid(foundResult);\n            test.resultObject(assertiveName, testResult, errorMessage, comparisonMessage)\n        },\n\n        assertJsonSchema: function (assertiveName, foundResult, errorMessage, jsonSchema) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Json schema does not match with the informed value\";\n            var comparisonMessage = { \"Json Schema\": jsonSchema, \"Found\": foundResult };\n            if (tv4.validate(JSON.parse(foundResult), assetSchema)) {\n                testResult = true;\n            }\n            test.resultObject(assertiveName, testResult, tv4.error, errorMessage, comparisonMessage)\n        },\n\n        assertMatchObject: function (assertiveName, expectedResult, foundResult, errorMessage, elementToRemove) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Tested object does not match with the informed value\";\n            var comparisonMessage = { \"Expected Fields and values\": expectedResult, \"IgnoredFields\": elementToRemove, \"Found\": foundResult };\n\n            if (elementToRemove) {\n                elementToRemove.forEach(function (element) {\n                    test.deepDelete(element, expectedResult)\n                }, this);\n            }\n            testResult = _.isMatch(foundResult, expectedResult);\n            test.resultObject(assertiveName, testResult, errorMessage, comparisonMessage)\n        },\n\n        assertIsArray: function (assertiveName, foundResult, errorMessage) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Informed value is not an array.\";\n\n            try {\n                var testObject = JSON.parse(foundResult);\n                if ((_.isArray(testObject))) {\n                    testResult = true;\n                }\n            } catch (e) {\n                var objectType = typeof foundResult;\n                var comparisonMessage = { \"Expected Type\": \"Array\", \"Found Type\": objectType };\n            }\n\n            test.resultObject(assertiveName, testResult, errorMessage, comparisonMessage)\n        },\n\n        assertJsonArrayLength: function (assertiveName, expectedLength, foundResult, errorMessage) {\n            var testResult = false;\n            errorMessage = errorMessage || \"Informed value is not an array.\";\n            var comparisonMessage = \"\";\n            try {\n                var testObject = JSON.parse(foundResult);\n                if ((_.isArray(testObject)) && (testObject.length === expectedLength)) {\n                    testResult = true;\n                }\n                comparisonMessage = { \"Expected length\": expectedLength, \"Found length\": testObject.length };\n\n            } catch (e) {\n                var objectType = typeof foundResult;\n                comparisonMessage = { \"Expected Type\": \"Array\", \"Found Type\": objectType };\n            }\n\n            test.resultObject(assertiveName, testResult, errorMessage, comparisonMessage)\n        },\n\n        assertFailTest: function (assertiveName, errorMessage, comparisonMessage) {\n            errorMessage = errorMessage || \"There are errors on save or get objects\";\n            comparisonMessage = comparisonMessage || \"No objects were provided to this test.\";\n            test.resultObject(assertiveName, false, errorMessage, comparisonMessage)\n        },\n        assertPassTest: function (assertiveName) {\n            test.resultObject(assertiveName, true, \"\", \"\")\n        },\n    }\n})();\n\n\n\n",
      "enabled": true,
      "type": "text"
    }
  ],
  "_postman_variable_scope": "globals",
  "_postman_exported_at": "2017-09-27T17:15:58.052Z",
  "_postman_exported_using": "Postman/5.2.1"
}